import React, { useState, useEffect } from 'react';
import './AIComponents.css';

const AIInsightsPanel = () => {
  const [insights, setInsights] = useState([]);
  const [loading, setLoading] = useState(false);
  const [lastUpdate, setLastUpdate] = useState(null);
  const [autoRefresh, setAutoRefresh] = useState(false);

  const fetchInsights = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/ai/insights');
      const data = await response.json();
      
      if (data.error) {
        setInsights([{ content: `❌ Error: ${data.error}`, type: 'error' }]);
      } else {
        setInsights(data.insights || []);
        setLastUpdate(new Date().toLocaleTimeString());
      }
    } catch (error) {
      setInsights([{ content: `❌ Network error: ${error.message}`, type: 'error' }]);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchInsights();
  }, []);

  useEffect(() => {
    let interval;
    if (autoRefresh) {
      interval = setInterval(fetchInsights, 30000); // Refresh every 30 seconds
    }
    return () => clearInterval(interval);
  }, [autoRefresh]);

  const getInsightIcon = (index) => {
    const icons = ['🔍', '💡', '⚠️', '🎯', '📊'];
    return icons[index % icons.length];
  };

  return (
    <div className="ai-insights-panel">
      <div className="insights-header">
        <h3>🧠 AI-Powered Insights</h3>
        <div className="insights-controls">
          <button 
            onClick={fetchInsights} 
            disabled={loading}
            className="refresh-btn"
          >
            {loading ? '🔄' : '🔄 Refresh'}
          </button>
          <label className="auto-refresh">
            <input
              type="checkbox"
              checked={autoRefresh}
              onChange={(e) => setAutoRefresh(e.target.checked)}
            />
            Auto-refresh
          </label>
        </div>
      </div>

      {lastUpdate && (
        <div className="last-update">
          Last updated: {lastUpdate}
        </div>
      )}

      {loading && insights.length === 0 ? (
        <div className="loading-insights">
          <div className="loading-spinner">🤖</div>
          <p>AI is analyzing your supply chain...</p>
        </div>
      ) : (
        <div className="insights-list">
          {insights.map((insight, index) => (
            <div 
              key={index} 
              className={`insight-card ${insight.type === 'error' ? 'error' : ''}`}
            >
              <div className="insight-header">
                <span className="insight-icon">{getInsightIcon(index)}</span>
                <span className="insight-title">
                  {index === 0 && 'Performance Issues'}
                  {index === 1 && 'Optimization Opportunities'}
                  {index === 2 && 'Concerning Patterns'}
                  {index === 3 && 'Management Focus'}
                  {index > 3 && 'Additional Insights'}
                </span>
              </div>
              <div className="insight-content">
                {insight.content}
              </div>
              {insight.provider && (
                <div className="insight-meta">
                  Generated by {insight.provider} • {insight.model}
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {insights.length === 0 && !loading && (
        <div className="no-insights">
          <p>🤖 Click refresh to generate AI insights about your supply chain.</p>
        </div>
      )}
    </div>
  );
};

export default AIInsightsPanel;